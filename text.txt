import React, { useState } from "react";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

const ExcelManager = () => {
  const [files, setFiles] = useState<File[]>([]);
  const [fileData, setFileData] = useState<{ [key: string]: any[] }>({});
  const [selectedFile, setSelectedFile] = useState<string | null>(null);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files) return;
    const uploadedFiles = Array.from(event.target.files);
    setFiles(uploadedFiles);

    uploadedFiles.forEach((file) => {
      const reader = new FileReader();
      reader.onload = (e) => {
        const binary = e.target?.result as string;
        const workbook = XLSX.read(binary, { type: "binary" });
        const sheetName = workbook.SheetNames[0];
        const sheetData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);

        setFileData((prev) => ({ ...prev, [file.name]: sheetData }));
      };
      reader.readAsBinaryString(file);
    });
  };

  const handleCellChange = (event: React.ChangeEvent<HTMLInputElement>, rowIndex: number, key: string) => {
    if (!selectedFile) return;
    const updatedData = [...fileData[selectedFile]];
    updatedData[rowIndex][key] = event.target.value;
    setFileData({ ...fileData, [selectedFile]: updatedData });
  };

  const handleSaveToLocalStorage = () => {
    if (!selectedFile) return;
    localStorage.setItem(selectedFile, JSON.stringify(fileData[selectedFile]));
    alert(`Saved ${selectedFile} to localStorage!`);
  };

  const handleDownload = () => {
    if (!selectedFile) return;

    const worksheet = XLSX.utils.json_to_sheet(fileData[selectedFile]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

    const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
    const file = new Blob([excelBuffer], {
      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    });
    saveAs(file, `${selectedFile}_edited.xlsx`);
  };

  return (
    <div>
      <input type="file" accept=".xlsx, .xls" multiple onChange={handleFileUpload} />

      <h3>Uploaded Files:</h3>
      {files.map((file) => (
        <p key={file.name}
           style={{ cursor: "pointer", textDecoration: "underline", color: selectedFile === file.name ? "red" : "blue" }}
           onClick={() => setSelectedFile(file.name)}>
          {file.name}
        </p>
      ))}

      {selectedFile && (
        <>
          <h3>Editing: {selectedFile}</h3>
          <table border="1">
            <thead>
              <tr>
                {fileData[selectedFile] && Object.keys(fileData[selectedFile][0]).map((key) => <th key={key}>{key}</th>)}
              </tr>
            </thead>
            <tbody>
              {fileData[selectedFile]?.map((row, rowIndex) => (
                <tr key={rowIndex}>
                  {Object.keys(row).map((key) => (
                    <td key={key}>
                      <input type="text" value={row[key]} onChange={(e) => handleCellChange(e, rowIndex, key)} />
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>

          <button onClick={handleSaveToLocalStorage}>Save Changes</button>
          <button onClick={handleDownload}>Download Edited File</button>
        </>
      )}
    </div>
  );
};

export default ExcelManager;
